/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package gui;

import controllers.DictionaryController;
import controllers.ModifyDictionaryAction;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.DefaultListModel;
import model.Category;
import model.Database;
import model.Translate;

/**
 *
 * @author Skrzypek
 */
public class Dictionary extends javax.swing.JPanel {

    Database db;
    ArrayList<Translate> tl;
    DictionaryController dc;
    int tr;
    String newline = System.lineSeparator();

    /**
     * Creates new form Dictionary
     */
    public Dictionary() {
        initComponents();
        db = new Database();
        tr = 0;
        try {
            db.fillDatabase();
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Dictionary.class.getName()).log(Level.SEVERE, null, ex);
        }
        tl = db.getTl();
        dc = new DictionaryController(db);

        dc.sortDictionary(tl, 0);
        setModel();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        comboTranslate = new javax.swing.JComboBox();
        comboCategories = new javax.swing.JComboBox();
        textSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        listWords = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        textAreaTranslate = new javax.swing.JTextArea();
        buttonNew = new javax.swing.JButton();
        buttonEdit = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel1.setText("Słownik");

        comboTranslate.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "polski -> hiszpański", "hiszpański -> polski" }));
        comboTranslate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboTranslateActionPerformed(evt);
            }
        });

        comboCategories.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Wszystkie" }));
        comboCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboCategoriesActionPerformed(evt);
            }
        });

        textSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                textSearchKeyReleased(evt);
            }
        });

        listWords.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listWordsValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listWords);

        textAreaTranslate.setBackground(new java.awt.Color(240, 240, 240));
        textAreaTranslate.setColumns(20);
        textAreaTranslate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        textAreaTranslate.setLineWrap(true);
        textAreaTranslate.setRows(5);
        textAreaTranslate.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        textAreaTranslate.setEnabled(false);
        jScrollPane2.setViewportView(textAreaTranslate);

        buttonNew.setText("Nowy");
        buttonNew.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonNewActionPerformed(evt);
            }
        });

        buttonEdit.setText("Edytuj");
        buttonEdit.setEnabled(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(18, 18, 18)
                                .addComponent(comboTranslate, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(textSearch, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(comboCategories, javax.swing.GroupLayout.Alignment.LEADING, 0, 127, Short.MAX_VALUE))
                                .addGap(57, 57, 57)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(59, 59, 59)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonNew, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 518, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(comboTranslate))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(comboCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(textSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(buttonEdit)
                            .addComponent(buttonNew))))
                .addContainerGap(139, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void comboCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboCategoriesActionPerformed
        textSearch.setText("");
        setWordsModel();
    }//GEN-LAST:event_comboCategoriesActionPerformed

    private void textSearchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textSearchKeyReleased
        filterWords();
    }//GEN-LAST:event_textSearchKeyReleased

    private void listWordsValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listWordsValueChanged
        //jLabel2.setText(db.getTranslate(listWords.getSelectedValue() + ""));
        if (listWords.getSelectedIndex() != -1) {
            Translate t;
            if (tr == 0) {
                t = db.getTranslateS(listWords.getSelectedValue() + "");
            } else {
                t = db.getTranslateP(listWords.getSelectedValue() + "");
            }
            String text = "";
            if (tr == 0) {
                text += t.getSpanish();
            } else {
                text += t.getPolish();
            }

            if (t.getType() != null) {
                text += "\t/" + t.getType();
            }
            text += newline;
            text += newline;
            if (t.getNote() != null) {
                text += t.getNote();
            }
            text += newline;
            text += newline;
            text = text + "Kategorie:" + newline;
            ArrayList<Category> cl = t.getCl();
            for (Category c : cl) {
                text += c.getName();
                text += newline;
            }
            textAreaTranslate.setText(text);
            buttonEdit.setEnabled(true);
        } else {
            textAreaTranslate.setText("");
            buttonEdit.setEnabled(true);
        }
    }//GEN-LAST:event_listWordsValueChanged

    private void comboTranslateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboTranslateActionPerformed
        tr = comboTranslate.getSelectedIndex();
        dc.sortDictionary(tl, tr);
        setModel();
        textSearch.setText("");
        buttonEdit.setEnabled(false);
    }//GEN-LAST:event_comboTranslateActionPerformed

    private void buttonNewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonNewActionPerformed
        ModifyDictionaryAction mda = new ModifyDictionaryAction(db);
        mda.newWord();
    }//GEN-LAST:event_buttonNewActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonEdit;
    private javax.swing.JButton buttonNew;
    private javax.swing.JComboBox comboCategories;
    private javax.swing.JComboBox comboTranslate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JList listWords;
    private javax.swing.JTextArea textAreaTranslate;
    private javax.swing.JTextField textSearch;
    // End of variables declaration//GEN-END:variables

    private void setModel() {
        setCategoriesModel();
        setWordsModel();
    }

    private void setCategoriesModel() {
        comboCategories.setModel(dc.createCategoriesModel());
    }

    private void setWordsModel() {
        DefaultListModel dlm = new DefaultListModel();
        if (tr == 0) {
            if (comboCategories.getSelectedIndex() == 0) {
                for (Translate t : tl) {
                    dlm.addElement(t.getPolish());
                }
            } else {
                ArrayList<Category> cl = db.getCl();
                String cat = "" + comboCategories.getSelectedItem();
                for (Category c : cl) {
                    if (c.getName().equals(cat)) {
                        ArrayList<Translate> tl = c.getTl();
                        Collections.sort(tl, new Comparator<Translate>() {

                            public int compare(Translate t1, Translate t2) {
                                return t1.getPolish().compareTo(t2.getPolish());
                            }
                        });
                        for (Translate t : tl) {
                            dlm.addElement(t.getPolish());
                        }
                        break;
                    }
                }
            }
        } else {
            if (comboCategories.getSelectedIndex() == 0) {
                for (Translate t : tl) {
                    dlm.addElement(t.getSpanish());
                }
            } else {
                ArrayList<Category> cl = db.getCl();
                String cat = "" + comboCategories.getSelectedItem();
                for (Category c : cl) {
                    if (c.getName().equals(cat)) {
                        ArrayList<Translate> tl = c.getTl();
                        Collections.sort(tl, new Comparator<Translate>() {

                            public int compare(Translate t1, Translate t2) {
                                return t1.getSpanish().compareTo(t2.getSpanish());
                            }
                        });
                        for (Translate t : tl) {
                            dlm.addElement(t.getSpanish());
                        }
                        break;
                    }
                }
            }
        }

        listWords.setModel(dlm);
        buttonEdit.setEnabled(false);
    }

    private void filterWords() {
        String s = textSearch.getText();
        setWordsModel();
        DefaultListModel dlm = (DefaultListModel) listWords.getModel();
        for (int i = 0; i < dlm.getSize(); i++) {
            String word = (String) dlm.get(i);
            int in = word.indexOf(s);
            if (in != 0) {
                dlm.remove(i);
                i--;
            }
        }
        listWords.setModel(dlm);
        buttonEdit.setEnabled(false);
    }
}
